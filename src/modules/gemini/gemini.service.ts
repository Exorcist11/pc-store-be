import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectModel } from '@nestjs/mongoose';
import { Product, ProductDocument } from '../products/schema/product.schema';
import { Model } from 'mongoose';
import { GoogleGenAI } from '@google/genai';

interface ProductFilter {
  productTypes: string[];
  categories: string[];
  brands: string[];
  priceRange: {
    min: number | null;
    max: number | null;
  };
  attributes: Record<string, string[]>;
  keywords: string[];
}

@Injectable()
export class GeminiService {
  private genAI: GoogleGenAI;

  constructor(
    private configService: ConfigService,
    @InjectModel(Product.name) private productModel: Model<ProductDocument>,
  ) {
    this.genAI = new GoogleGenAI({
      apiKey: this.configService.get<string>('GEMINI_API_KEY'),
    });
  }

  private async analyzeUserQuery(userQuery: string): Promise<ProductFilter> {
    const analysisPrompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω ph√¢n t√≠ch y√™u c·∫ßu mua s·∫Øm s·∫£n ph·∫©m c√¥ng ngh·ªá t·∫°i Vi·ªát Nam.

Y√™u c·∫ßu c·ªßa kh√°ch h√†ng: "${userQuery}"

H√£y ph√¢n t√≠ch y√™u c·∫ßu v√† tr√≠ch xu·∫•t th√¥ng tin d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:
{
  "productTypes": ["laptop" | "desktop" | "accessory"],
  "categories": ["gaming", "vƒÉn ph√≤ng", "ƒë·ªì h·ªça", "sinh vi√™n", ...],
  "brands": ["asus", "dell", "hp", "lenovo", "acer", "msi", ...],
  "priceRange": {
    "min": s·ªë ti·ªÅn t·ªëi thi·ªÉu (VNƒê) ho·∫∑c null,
    "max": s·ªë ti·ªÅn t·ªëi ƒëa (VNƒê) ho·∫∑c null
  },
  "attributes": {
    "CPU": ["Intel Core i5", "Intel Core i7", "AMD Ryzen 5", ...],
    "RAM": ["8GB", "16GB", "32GB", ...],
    "Storage": ["256GB SSD", "512GB SSD", "1TB HDD", ...],
    "VGA": ["RTX 3050", "RTX 4060", "GTX 1650", ...],
    "Screen": ["15.6 inch", "14 inch", ...],
    "color": ["ƒëen", "b·∫°c", "x√°m", ...]
  },
  "keywords": ["t·ª´ kh√≥a quan tr·ªçng kh√°c"]
}

L∆∞u √Ω:
- N·∫øu kh√¥ng c√≥ th√¥ng tin v·ªÅ tr∆∞·ªùng n√†o, ƒë·ªÉ m·∫£ng r·ªóng [] ho·∫∑c null
- Gi√° ti·ªÅn: "20 tri·ªáu", "20tr", "d∆∞·ªõi 20 tri·ªáu" -> max: 20000000
- RAM: "16GB", "RAM 16GB" -> ["16GB"]
- H√£y suy lu·∫≠n t·ª´ ng·ªØ c·∫£nh (VD: "gaming" -> c√≥ th·ªÉ c·∫ßn VGA r·ªùi, RAM cao)

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.`;

    try {
      const response = await this.genAI.models.generateContent({
        model: 'gemini-2.0-flash-exp',
        contents: analysisPrompt,
      });

      const responseText = response.text;
      const jsonMatch =
        responseText.match(/```json\n([\s\S]*?)\n```/) ||
        responseText.match(/\{[\s\S]*\}/);

      if (jsonMatch) {
        const jsonStr = jsonMatch[1] || jsonMatch[0];
        return JSON.parse(jsonStr);
      }

      throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch response t·ª´ Gemini');
    } catch (error) {
      console.error('Error analyzing user query:', error);
      // Fallback: tr·∫£ v·ªÅ filter r·ªóng
      return {
        productTypes: [],
        categories: [],
        brands: [],
        priceRange: { min: null, max: null },
        attributes: {},
        keywords: [],
      };
    }
  }

  /**
   * B∆∞·ªõc 2: X√¢y d·ª±ng query MongoDB d·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch (kh√¥ng d√πng text index)
   */
  private buildMongoQuery(filter: ProductFilter): any[] {
    const pipeline: any[] = [];

    // Match ƒëi·ªÅu ki·ªán c∆° b·∫£n
    const matchConditions: any = { isActive: true };

    // L·ªçc productType
    if (filter.productTypes.length > 0) {
      matchConditions.productType = { $in: filter.productTypes };
    }

    // L·ªçc category (s·ª≠ d·ª•ng regex)
    if (filter.categories.length > 0) {
      const categoryRegex = filter.categories.join('|');
      matchConditions.category = { $regex: categoryRegex, $options: 'i' };
    }

    // L·ªçc brand (s·ª≠ d·ª•ng regex)
    if (filter.brands.length > 0) {
      const brandRegex = filter.brands.join('|');
      matchConditions.brand = { $regex: brandRegex, $options: 'i' };
    }

    // T√¨m ki·∫øm theo keywords (d√πng regex cho name v√† description)
    if (filter.keywords.length > 0) {
      const keywordRegex = filter.keywords.join('|');
      matchConditions.$or = [
        { name: { $regex: keywordRegex, $options: 'i' } },
        { description: { $regex: keywordRegex, $options: 'i' } },
      ];
    }

    pipeline.push({ $match: matchConditions });

    // Unwind variants
    pipeline.push({ $unwind: '$variants' });

    // Match ƒëi·ªÅu ki·ªán variant
    const variantMatch: any = {
      'variants.stock': { $gt: 0 },
    };

    // L·ªçc price range
    if (filter.priceRange.min !== null) {
      variantMatch['variants.price'] = { $gte: filter.priceRange.min };
    }
    if (filter.priceRange.max !== null) {
      variantMatch['variants.price'] = {
        ...variantMatch['variants.price'],
        $lte: filter.priceRange.max,
      };
    }

    // L·ªçc attributes
    for (const [key, values] of Object.entries(filter.attributes)) {
      if (values.length > 0) {
        // S·ª≠ d·ª•ng regex ƒë·ªÉ match linh ho·∫°t h∆°n (VD: "16GB" match v·ªõi "16 GB")
        const attrRegex = values
          .map((v) => v.replace(/\s+/g, '\\s*'))
          .join('|');
        variantMatch[`variants.attributes.${key}`] = {
          $regex: attrRegex,
          $options: 'i',
        };
      }
    }

    pipeline.push({ $match: variantMatch });

    // Group l·∫°i theo product
    pipeline.push({
      $group: {
        _id: '$_id',
        name: { $first: '$name' },
        slug: { $first: '$slug' },
        description: { $first: '$description' },
        brand: { $first: '$brand' },
        category: { $first: '$category' },
        productType: { $first: '$productType' },
        allowedAttributes: { $first: '$allowedAttributes' },
        variants: { $push: '$variants' },
        images: { $first: '$images' },
        discount: { $first: '$discount' },
        isActive: { $first: '$isActive' },
        createdAt: { $first: '$createdAt' },
        updatedAt: { $first: '$updatedAt' },
      },
    });

    // Th√™m minPrice v√† sort
    pipeline.push({ $addFields: { minPrice: { $min: '$variants.price' } } });
    pipeline.push({ $sort: { minPrice: 1 } });
    pipeline.push({ $limit: 15 });

    return pipeline;
  }

  /**
   * B∆∞·ªõc 3: Populate brand v√† category
   */
  private async populateProducts(products: any[]): Promise<any[]> {
    return await this.productModel.populate(products, [
      { path: 'brand', select: 'name slug' },
      { path: 'category', select: 'name slug level' },
    ]);
  }

  /**
   * B∆∞·ªõc 4: S·ª≠ d·ª•ng Gemini ƒë·ªÉ g·ª£i √Ω s·∫£n ph·∫©m t·ªët nh·∫•t
   */
  private async getRecommendations(
    userQuery: string,
    products: any[],
    filter: ProductFilter,
  ): Promise<any> {
    const productsJson = JSON.stringify(
      products.map((p) => ({
        name: p.name,
        slug: p.slug,
        description: p.description,
        brand: p.brand?.name || 'N/A',
        category: p.category?.name || 'N/A',
        productType: p.productType,
        minPrice: p.minPrice,
        discount: p.discount,
        variants: p.variants.map((v) => ({
          sku: v.sku,
          price: v.price,
          stock: v.stock,
          attributes: v.attributes,
        })),
        images: p.images,
      })),
      null,
      2,
    );

    const recommendationPrompt = `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n s·∫£n ph·∫©m c√¥ng ngh·ªá.

Y√™u c·∫ßu c·ªßa kh√°ch h√†ng: "${userQuery}"

Ph√¢n t√≠ch y√™u c·∫ßu: ${JSON.stringify(filter, null, 2)}

Danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn:
${productsJson}

Nhi·ªám v·ª•:
1. Ph√¢n t√≠ch k·ªπ y√™u c·∫ßu c·ªßa kh√°ch h√†ng v√† ƒë·∫∑c ƒëi·ªÉm t·ª´ng s·∫£n ph·∫©m
2. Ch·ªçn 3-5 s·∫£n ph·∫©m ph√π h·ª£p NH·∫§T (∆∞u ti√™n s·∫£n ph·∫©m c√≥ t·ªìn kho)
3. V·ªõi m·ªói s·∫£n ph·∫©m, ch·ªçn variant ph√π h·ª£p nh·∫•t
4. Gi·∫£i th√≠ch r√µ r√†ng t·∫°i sao s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu
5. So s√°nh ∆∞u/nh∆∞·ª£c ƒëi·ªÉm n·∫øu c√≥ nhi·ªÅu l·ª±a ch·ªçn
6. ƒê∆∞a ra l·ªùi khuy√™n v·ªÅ gi√° tr·ªã ƒë·ªìng ti·ªÅn

ƒê·ªãnh d·∫°ng output (JSON):
{
  "summary": "T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ nhu c·∫ßu v√† ƒë·ªÅ xu·∫•t t·ªïng quan",
  "recommendations": [
    {
      "productName": "T√™n s·∫£n ph·∫©m",
      "productSlug": "slug-san-pham",
      "variantSku": "SKU c·ªßa variant ƒë∆∞·ª£c ch·ªçn",
      "price": gi√° ti·ªÅn (s·ªë),
      "discount": % gi·∫£m gi√°,
      "finalPrice": gi√° sau gi·∫£m (s·ªë),
      "attributes": {
        "CPU": "...",
        "RAM": "...",
        ...c√°c th√¥ng s·ªë quan tr·ªçng
      },
      "reason": "Gi·∫£i th√≠ch chi ti·∫øt t·∫°i sao ph√π h·ª£p (3-5 c√¢u)",
      "pros": ["∆Øu ƒëi·ªÉm 1", "∆Øu ƒëi·ªÉm 2", ...],
      "cons": ["Nh∆∞·ª£c ƒëi·ªÉm 1", "Nh∆∞·ª£c ƒëi·ªÉm 2", ...],
      "valueScore": ƒëi·ªÉm gi√° tr·ªã (1-10)
    }
  ],
  "advice": "L·ªùi khuy√™n th√™m cho kh√°ch h√†ng"
}

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.`;

    try {
      const response = await this.genAI.models.generateContent({
        model: 'gemini-2.0-flash-exp',
        contents: recommendationPrompt,
      });

      const responseText = response.text;
      const jsonMatch =
        responseText.match(/```json\n([\s\S]*?)\n```/) ||
        responseText.match(/\{[\s\S]*\}/);

      if (jsonMatch) {
        const jsonStr = jsonMatch[1] || jsonMatch[0];
        return JSON.parse(jsonStr);
      }

      return { error: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch response', raw: responseText };
    } catch (error) {
      console.error('Error getting recommendations:', error);
      return {
        error: 'L·ªói khi x·ª≠ l√Ω g·ª£i √Ω s·∫£n ph·∫©m',
        details: error.message,
      };
    }
  }

  /**
   * Main function: Ph√¢n t√≠ch v√† g·ª£i √Ω s·∫£n ph·∫©m
   */
  async recommendProducts(userQuery: string): Promise<any> {
    try {
      // B∆∞·ªõc 1: Ph√¢n t√≠ch y√™u c·∫ßu b·∫±ng Gemini
      console.log('üîç Ph√¢n t√≠ch y√™u c·∫ßu kh√°ch h√†ng...');
      const filter = await this.analyzeUserQuery(userQuery);
      console.log('‚úÖ K·∫øt qu·∫£ ph√¢n t√≠ch:', JSON.stringify(filter, null, 2));

      // B∆∞·ªõc 2: Query MongoDB
      console.log('üîé T√¨m ki·∫øm s·∫£n ph·∫©m...');
      const pipeline = this.buildMongoQuery(filter);
      let products = await this.productModel.aggregate(pipeline).exec();

      // B∆∞·ªõc 3: Populate brand v√† category
      if (products.length > 0) {
        products = await this.populateProducts(products);
      }
      console.log(`‚úÖ T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m`);

      // B∆∞·ªõc 4: N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, n·ªõi l·ªèng ƒëi·ªÅu ki·ªán
      if (products.length === 0) {
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m, n·ªõi l·ªèng ƒëi·ªÅu ki·ªán...');
        const relaxedFilter = { ...filter };

        // Ch·ªâ gi·ªØ productType v√† priceRange
        relaxedFilter.categories = [];
        relaxedFilter.brands = [];
        relaxedFilter.attributes = {};
        relaxedFilter.keywords = [];

        const relaxedPipeline = this.buildMongoQuery(relaxedFilter);
        products = await this.productModel.aggregate(relaxedPipeline).exec();

        if (products.length > 0) {
          products = await this.populateProducts(products);
        }

        console.log(`‚úÖ T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m sau khi n·ªõi l·ªèng`);
      }

      // B∆∞·ªõc 5: S·ª≠ d·ª•ng Gemini ƒë·ªÉ g·ª£i √Ω
      console.log('ü§ñ Gemini ƒëang ph√¢n t√≠ch v√† g·ª£i √Ω...');
      const recommendations = await this.getRecommendations(
        userQuery,
        products,
        filter,
      );

      return {
        userQuery,
        analyzedFilter: filter,
        totalProductsFound: products.length,
        recommendations,
      };
    } catch (error) {
      console.error('‚ùå Error in recommendProducts:', error);
      return {
        error: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu',
        details: error.message,
      };
    }
  }
}
